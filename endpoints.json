{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/users": {
    "description": "serves an object with a key of 'total' that represents a count of all users as an integer, and 'users' that represents all quired user objects in an array. Can take a query of 'sort_by' to determine how to arrange 'users' - valid sort_bys are 'join_date'(default) and 'username'. Can take a query of 'order' to determine if the 'sort_by' is ascending or descending - valid orders are 'desc'(default) and 'asc'. Can take a query of 'username' to return a single matching user. Can take a query of 'limit' to determine the maximum number of user objects return in the 'users' array - must be a whole, positive number (defaults to 10). Can take a query of 'page' to determine which page of queried 'users' to display in the array - must be a whole, positive number (defaults to 1)",
    "queries": ["sort_by", "order", "username", "limit", "page"],
    "exampleInput": {},
    "exampleResponse": {
      "total": 2,
      "users": [
        {
          "user_id": 1,
          "username": "testuser1",
          "email": "test1@test.com",
          "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
          "avatar_url": "https://cdn.pixabay.com/photo/2018/11/13/22/01/avatar-3814081_1280.png",
          "join_date": "2020-01-01T12:00:00.000Z"
        },
        {
          "user_id": 2,
          "username": "testuser2",
          "email": "test2@test.com",
          "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
          "avatar_url": "https://cdn.pixabay.com/photo/2018/11/13/22/01/avatar-3814081_1280.png",
          "join_date": "2020-02-14T12:00:00.000Z"
        }
      ]
    }
  },
  "GET /api/users/:user_id": {
    "description": "serves an the requested user as an object on the key of 'user'",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": {
      "user": {
        "user_id": 1,
        "username": "testuser1",
        "email": "test1@test.com",
        "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
        "avatar_url": "https://cdn.pixabay.com/photo/2018/11/13/22/01/avatar-3814081_1280.png",
        "join_date": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "POST /api/users": {
    "description": "posts a new user and serves that user as an object on the key of 'user'. Takes 3 mandatory properties of 'username', 'email' and 'password'",
    "queries": [],
    "exampleInput": {
      "username": "testuser1",
      "email": "test1@test.com",
      "password": "securepassword"
    },
    "exampleResponse": {
      "user": {
        "user_id": 1,
        "username": "testuser1",
        "email": "test1@test.com",
        "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
        "avatar_url": "https://cdn.pixabay.com/photo/2018/11/13/22/01/avatar-3814081_1280.png",
        "join_date": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "POST /api/users/login": {
    "description": "Takes 2 mandatory properties of 'username' and 'password', and serves a message either to authorise or deny a login attempt based on the provided password matching the provided user's password",
    "queries": [],
    "exampleInput": {
      "username": "testuser1",
      "password": "securepassword"
    },
    "exampleResponse": {
      "message": "Successfully logged in"
    },
    "exampleResponse2": {
      "message": "Password is incorrect"
    }
  },
  "PATCH /api/users/:user_id": {
    "description": "updates the selected user via 'user_id' and serves the updated user as an object. Takes at least one property from 'username', 'email', 'password' and 'avatar_url'",
    "queries": [],
    "exampleInput": {
      "username": "patched_username",
      "email": "patched@email.com",
      "password": "patched_password",
      "avatar_url": "https://patched.com/new_image.png"
    },
    "exampleResponse": {
      "user": {
        "user_id": 1,
        "username": "patched_username",
        "email": "patched@email.com",
        "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
        "avatar_url": "https://patched.com/new_image.png",
        "join_date": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "DELETE /api/users/:user_id": {
    "description": "deletes the selected user via 'user_id'. deleting a user will cascade down and delete any children in other data tables (eg. 'leagues')",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": null
  },
  "GET /api/leagues": {
    "description": "serves an object with a key of 'total' that represents all retrieved leagues as an integer, and 'leagues' that represents all league objects in an array",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": {
      "total": 2,
      "users": [
        {
          "league_id": 1,
          "league_name": "testleague1",
          "owner": 1,
          "notes": "this is a test note",
          "created_at": "2020-01-01T12:00:00.000Z"
        },
        {
          "league_id": 2,
          "league_name": "testleague2",
          "owner": 3,
          "notes": null,
          "created_at": "2020-01-01T12:00:00.000Z"
        }
      ]
    }
  },
  "GET /api/leagues/:league_id": {
    "description": "serves an the requested league as an object on the key of 'league'",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": {
      "league": {
        "league_id": 2,
        "league_name": "testleague2",
        "owner": 3,
        "notes": null,
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "POST /api/leagues": {
    "description": "posts a new league and serves that league as an object on the key of 'league'. Takes 2 mandatory properties of 'league_name' and 'owner'. 'owner' must be an integer matching an existing user's 'user_id'",
    "queries": [],
    "exampleInput": {
      "league_name": "testleague3",
      "owner": 2
    },
    "exampleResponse": {
      "league": {
        "league_id": 3,
        "league_name": "testleague3",
        "owner": 2,
        "notes": null,
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "PATCH /api/leagues/:league_id": {
    "description": "updates the selected league via 'league_id' and serves the updated league as an object. Takes at least one property from 'league_name', 'owner', 'notes'",
    "queries": [],
    "exampleInput": {
      "league_name": "patched_league_name",
      "owner": 3,
      "notes": "patched_notes"
    },
    "exampleResponse": {
      "league": {
        "league_id": 3,
        "league_name": "patched_league_name",
        "owner": 3,
        "notes": "patched_notes",
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  }
}
