{
  "GET /api": {
    "description": "serves up a json representation of all the available endpoints of the api"
  },
  "GET /api/users": {
    "description": "serves an object with a key of 'total' that represents a count of all queried users as an integer, and 'users' that represents all quired user objects in an array. Can take a query of 'sort_by' to determine how to arrange 'users' - valid sort_bys are 'join_date'(default) and 'username'. Can take a query of 'order' to determine if the 'sort_by' is ascending or descending - valid orders are 'desc'(default) and 'asc'. Can take a query of 'username' to return a single matching user. Can take a query of 'limit' to determine the maximum number of user objects return in the 'users' array - must be a whole, positive number (defaults to 10). Can take a query of 'page' to determine which page of queried 'users' to display in the array - must be a whole, positive number (defaults to 1)",
    "queries": ["sort_by", "order", "username", "limit", "page"],
    "exampleInput": {},
    "exampleResponse": {
      "total": 2,
      "users": [
        {
          "user_id": 1,
          "username": "testuser1",
          "email": "test1@test.com",
          "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
          "avatar_url": "https://cdn.pixabay.com/photo/2018/11/13/22/01/avatar-3814081_1280.png",
          "join_date": "2020-01-01T12:00:00.000Z"
        },
        {
          "user_id": 2,
          "username": "testuser2",
          "email": "test2@test.com",
          "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
          "avatar_url": "https://cdn.pixabay.com/photo/2018/11/13/22/01/avatar-3814081_1280.png",
          "join_date": "2020-02-14T12:00:00.000Z"
        }
      ]
    }
  },
  "GET /api/users/:user_id": {
    "description": "serves the requested user as an object on the key of 'user'",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": {
      "user": {
        "user_id": 1,
        "username": "testuser1",
        "email": "test1@test.com",
        "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
        "avatar_url": "https://cdn.pixabay.com/photo/2018/11/13/22/01/avatar-3814081_1280.png",
        "join_date": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "POST /api/users": {
    "description": "posts a new user and serves that user as an object on the key of 'user'. Takes 3 mandatory properties of 'username', 'email' and 'password'",
    "queries": [],
    "exampleInput": {
      "username": "testuser1",
      "email": "test1@test.com",
      "password": "securepassword"
    },
    "exampleResponse": {
      "user": {
        "user_id": 1,
        "username": "testuser1",
        "email": "test1@test.com",
        "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
        "avatar_url": "https://cdn.pixabay.com/photo/2018/11/13/22/01/avatar-3814081_1280.png",
        "join_date": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "POST /api/users/login": {
    "description": "Takes 2 mandatory properties of 'username' and 'password', and serves a message either to authorise or deny a login attempt based on the provided password matching the provided user's password",
    "queries": [],
    "exampleInput": {
      "username": "testuser1",
      "password": "securepassword"
    },
    "exampleResponse": {
      "message": "Successfully logged in"
    },
    "exampleResponse2": {
      "message": "Password is incorrect"
    }
  },
  "PATCH /api/users/:user_id": {
    "description": "updates the selected user via 'user_id' and serves the updated user as an object. Takes at least one property from 'username', 'email', 'password' and 'avatar_url'",
    "queries": [],
    "exampleInput": {
      "username": "patched_username",
      "email": "patched@email.com",
      "password": "patched_password",
      "avatar_url": "https://patched.com/new_image.png"
    },
    "exampleResponse": {
      "user": {
        "user_id": 1,
        "username": "patched_username",
        "email": "patched@email.com",
        "password": "$2b$10$6/TzQ48/7IZVauDwYMw4/.K.1OhZkxyPOvbC/FOq.hjmyOOEgKpQW",
        "avatar_url": "https://patched.com/new_image.png",
        "join_date": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "DELETE /api/users/:user_id": {
    "description": "deletes the selected user via 'user_id'. deleting a user will cascade down and delete any children in other data tables (eg. 'leagues')",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": null
  },
  "GET /api/leagues": {
    "description": "serves an object with a key of 'total' that represents all queried leagues as an integer, and 'leagues' that represents all quiried league objects in an array. Can take a query of 'sort_by' to determine how to arrange 'leagues' - valid sort_bys are 'created_at'(default) and 'league_name'. Can take a query of 'order' to determine if the 'sort_by' is ascending or descending - valid orders are 'desc'(default) and 'asc'. Can take a query of 'league_name' to return a single matching league. Can take a query of 'owner' to return all leagues owned by one particualr user. Can take a query of 'limit' to determine the maximum number of league objects returned in the 'leagues' array - must be a whole, positive number (defaults to 10). Can take a query of 'page' to determine which page of queried 'leagues' to display in the array - must be a whole, positive number (defaults to 1)",
    "queries": ["sort_by", "order", "league_name", "owner", "limit", "page"],
    "exampleInput": {},
    "exampleResponse": {
      "total": 2,
      "users": [
        {
          "league_id": 1,
          "league_name": "testleague1",
          "owner": 1,
          "league_image_url": "https://www.shutterstock.com/image-illustration/no-picture-available-placeholder-thumbnail-600nw-2179364083.jpg",
          "notes": "this is a test note",
          "created_at": "2020-01-01T12:00:00.000Z"
        },
        {
          "league_id": 2,
          "league_name": "testleague2",
          "owner": 3,
          "league_image_url": "https://www.shutterstock.com/image-illustration/no-picture-available-placeholder-thumbnail-600nw-2179364083.jpg",
          "notes": null,
          "created_at": "2020-01-01T12:00:00.000Z"
        }
      ]
    }
  },
  "GET /api/leagues/:league_id": {
    "description": "serves the requested league as an object on the key of 'league'",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": {
      "league": {
        "league_id": 2,
        "league_name": "testleague2",
        "owner": 3,
        "league_image_url": "https://www.shutterstock.com/image-illustration/no-picture-available-placeholder-thumbnail-600nw-2179364083.jpg",
        "notes": null,
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "GET /api/leagues/:league_id/pokemon": {
    "description": "serves an object with a key of 'total' that represents a count of all queried leaguePokemon (pokemon registered for selection in a given league) as an integer, and 'leaguePokemon' that represents all quired leaguePokemon objects in an array. Can take a query of 'sort_by' to determine how to arrange 'leaguePokemon' - valid sort_bys are 'pokemon_name'(default), 'pokedex_no' and 'speed_stat'. Can take a query of 'order' to determine if the 'sort_by' is ascending or descending - valid orders are 'asc'(default) and 'desc'. Can take a query of 'pokedex_no' to return all matching leaguePokemon varients. Can take a queries of 'type' and 'type2' to return all leaguePokemon of that include that type (if one is quired) or that match the typing combination (if two are queried). Can take a query of 'ability' to return all leaguePokemon that can have that particular ability. Can take a query of 'tier' to return all leaguePokemon within the quired tier. Can take a query of 'team' (given as an integer representing a team's id number) to return all leaguePokemon drafted into the queried team.  Can take a query of 'limit' to determine the maximum number of user objects return in the 'users' array - must be a whole, positive number (defaults to 10). Can take a query of 'page' to determine which page of queried 'users' to display in the array - must be a whole, positive number (defaults to 1)",
    "queries": [
      "sort_by",
      "order",
      "pokedex_no",
      "type",
      "type2",
      "ability",
      "tier",
      "team",
      "limit",
      "page"
    ],
    "exampleInput": {},
    "exampleResponse": {
      "total": 4,
      "leaguePokemon": [
        {
          "tier": "untiered",
          "drafted_by": null,
          "drafted_at": null,
          "pokemon_name": "bulbasaur",
          "pokedex_no": 1,
          "speed_stat": 45,
          "type_1": "grass",
          "type_2": "poison",
          "ability_1": "overgrow",
          "ability_2": "chlorophyll",
          "ability_3": null
        },
        {
          "tier": "untiered",
          "drafted_by": null,
          "drafted_at": null,
          "pokemon_name": "charmander",
          "pokedex_no": 4,
          "speed_stat": 65,
          "type_1": "fire",
          "type_2": null,
          "ability_1": "blaze",
          "ability_2": "solar-power",
          "ability_3": null
        },
        {
          "tier": "untiered",
          "drafted_by": null,
          "drafted_at": null,
          "pokemon_name": "squirtle",
          "pokedex_no": 7,
          "speed_stat": 43,
          "type_1": "water",
          "type_2": null,
          "ability_1": "torrent",
          "ability_2": "rain-dish",
          "ability_3": null
        },
        {
          "tier": "untiered",
          "drafted_by": null,
          "drafted_at": null,
          "pokemon_name": "pikachu",
          "pokedex_no": 25,
          "speed_stat": 90,
          "type_1": "electric",
          "type_2": null,
          "ability_1": "static",
          "ability_2": "lightning-rod",
          "ability_3": null
        }
      ]
    }
  },
  "GET /api/leagues/:league_id/pokemon/:pokemon_name": {
    "description": "serves the requested leaguePokemon as an object on the key of 'leaguePokemon'",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": {
      "leaguePokemon": {
        "tier": "untiered",
        "drafted_by": null,
        "drafted_at": null,
        "pokemon_name": "pikachu",
        "pokedex_no": 25,
        "speed_stat": 90,
        "type_1": "electric",
        "type_2": null,
        "ability_1": "static",
        "ability_2": "lightning-rod",
        "ability_3": null
      }
    }
  },
  "POST /api/leagues": {
    "description": "posts a new league and serves that league as an object on the key of 'league'. Takes 2 mandatory properties of 'league_name' and 'owner'. 'owner' must be an integer matching an existing user's 'user_id'",
    "queries": [],
    "exampleInput": {
      "league_name": "testleague3",
      "owner": 2
    },
    "exampleResponse": {
      "league": {
        "league_id": 3,
        "league_name": "testleague3",
        "owner": 2,
        "league_image_url": "https://www.shutterstock.com/image-illustration/no-picture-available-placeholder-thumbnail-600nw-2179364083.jpg",
        "notes": null,
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "POST /api/leagues/:league_id/pokemon": {
    "description": "posts a new leaguePokemon and serves that leaguePokemon as an object on the key of 'leaguePokemon'. Takes 1 mandatory property of 'pokemon_name'. 'pokemon_name' must be a string matching an existing pokemon's name",
    "queries": [],
    "exampleInput": {
      "pokemon_name": "meowth"
    },
    "exampleResponse": {
      "leaguePokemon": {
        "leagues_pokemon_id": 8,
        "league": 1,
        "pokemon": "meowth",
        "tier": "untiered",
        "drafted_by": null,
        "drafted_at": null
      }
    }
  },
  "PATCH /api/leagues/:league_id": {
    "description": "updates the selected league via 'league_id' and serves the updated league as an object. Takes at least one property from 'league_name', 'owner', 'league_image_url' and 'notes'",
    "queries": [],
    "exampleInput": {
      "league_name": "patched_league_name",
      "owner": 3,
      "league_image_url": "https://i.natgeofe.com/n/548467d8-c5f1-4551-9f58-6817a8d2c45e/NationalGeographic_2572187_2x3.jpg",
      "notes": "patched_notes"
    },
    "exampleResponse": {
      "league": {
        "league_id": 3,
        "league_name": "patched_league_name",
        "owner": 3,
        "league_image_url": "https://i.natgeofe.com/n/548467d8-c5f1-4551-9f58-6817a8d2c45e/NationalGeographic_2572187_2x3.jpg",
        "notes": "patched_notes",
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "PATCH /api/leagues/:league_id/pokemon/:pokemon_name": {
    "description": "updates the selected leaguePokemon via 'league_id' and 'pokemon_name', then serves the updated leaguePokemon as an object. Takes at least one property from 'tier' or 'drafted_by'. 'tier' is a string limited to 12 characters, and 'drafted_by' is an integer that must represent the 'team_id' of a team that is participating in the provided league.",
    "queries": [],
    "exampleInput": {
      "tier": "C",
      "drafted_by": 1
    },
    "exampleResponse": {
      "leaguePokemon": {
        "tier": "C",
        "drafted_by": 1,
        "drafted_at": "2024-01-05T16:39:07.000Z",
        "pokemon_name": "meowth",
        "pokedex_no": 52,
        "speed_stat": 90,
        "type_1": "normal",
        "type_2": null,
        "ability_1": "pickup",
        "ability_2": "technician",
        "ability_3": "unnerve"
      }
    }
  },
  "DELETE /api/leagues/:league_id": {
    "description": "deletes the selected league via 'league_id'. deleting a league will cascade down and delete any children in other data tables (eg. 'teams')",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": null
  },
  "DELETE /api/leagues/:league_id/pokemon/:pokemon_name": {
    "description": "deletes the selected leaguePokemon via 'league_id' and 'pokemon_name'",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": null
  },
  "GET /api/teams": {
    "description": "serves an object with a key of 'total' that represents a count of all queried teams as an integer, and 'teams' that represents all quired team objects in an array. Can take a query of 'sort_by' to determine how to arrange 'teams' - valid sort_bys are 'created_at'(default) and 'team_name'. Can take a query of 'order' to determine if the 'sort_by' is ascending or descending - valid orders are 'desc'(default) and 'asc'. Can take a query of 'team_name' to return a single matching team. Can take a query of 'coach' to return all teams coached by one particualr user. Can take a query of 'league' to return all teams signed up to one particualr league. Can take a query of 'limit' to determine the maximum number of team objects returned in the 'teams' array - must be a whole, positive number (defaults to 10). Can take a query of 'page' to determine which page of queried 'teams' to display in the array - must be a whole, positive number (defaults to 1)",
    "queries": [
      "sort_by",
      "order",
      "team_name",
      "coach",
      "league",
      "limit",
      "page"
    ],
    "exampleInput": {},
    "exampleResponse": {
      "total": 2,
      "users": [
        {
          "team_id": 1,
          "team_name": "test_team1",
          "coach": 1,
          "league": 1,
          "team_image_url": "https://www.shutterstock.com/image-illustration/no-picture-available-placeholder-thumbnail-600nw-2179364083.jpg",
          "notes": null,
          "created_at": "2020-01-01T12:00:00.000Z"
        },
        {
          "team_id": 2,
          "team_name": "test_team2",
          "coach": 2,
          "league": 5,
          "team_image_url": "https://www.shutterstock.com/image-illustration/no-picture-available-placeholder-thumbnail-600nw-2179364083.jpg",
          "notes": "team notes example",
          "created_at": "2020-01-01T12:00:00.000Z"
        }
      ]
    }
  },
  "GET /api/teams/:team_id": {
    "description": "serves the requested team as an object on the key of 'team'",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": {
      "team": {
        "team_id": 1,
        "team_name": "test_team1",
        "coach": 1,
        "league": 1,
        "team_image_url": "https://www.shutterstock.com/image-illustration/no-picture-available-placeholder-thumbnail-600nw-2179364083.jpg",
        "notes": null,
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "POST /api/teams": {
    "description": "posts a new team and serves that team as an object on the key of 'team'. Takes 3 mandatory properties of 'team_name', 'coach' and 'league'. 'coach' must be an integer matching an existing user's 'user_id', and 'league' must be an integer matching an existing league's 'league_id'",
    "queries": [],
    "exampleInput": {
      "team_name": "test_team3",
      "coach": 4,
      "league": 5
    },
    "exampleResponse": {
      "team": {
        "team_id": 3,
        "team_name": "test_team3",
        "coach": 4,
        "league": 5,
        "team_image_url": "https://www.shutterstock.com/image-illustration/no-picture-available-placeholder-thumbnail-600nw-2179364083.jpg",
        "notes": null,
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "PATCH /api/teams/:team_id": {
    "description": "updates the selected team via 'team_id' and serves the updated team as an object. Takes at least one property from 'team_name', 'coach', 'team_image_url' and 'notes'",
    "queries": [],
    "exampleInput": {
      "team_name": "patched_team_name",
      "coach": 3,
      "team_image_url": "https://i.natgeofe.com/n/548467d8-c5f1-4551-9f58-6817a8d2c45e/NationalGeographic_2572187_2x3.jpg",
      "notes": "patched_notes"
    },
    "exampleResponse": {
      "team": {
        "team_id": 3,
        "team_name": "patched_team_name",
        "coach": 3,
        "league": 5,
        "team_image_url": "https://i.natgeofe.com/n/548467d8-c5f1-4551-9f58-6817a8d2c45e/NationalGeographic_2572187_2x3.jpg",
        "notes": "patched_notes",
        "created_at": "2020-01-01T12:00:00.000Z"
      }
    }
  },
  "DELETE /api/teams/:team_id": {
    "description": "deletes the selected team via 'team_id'. deleting a team will cascade down and delete any children in other data tables (eg. 'team_picks')",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": null
  },
  "GET /api/pokemon": {
    "description": "serves an object with a key of 'total' that represents a count of all queried pokemon as an integer, and 'pokemon' that represents all quired pokemon objects in an array. Can take a query of 'sort_by' to determine how to arrange 'pokemon' - valid sort_bys are 'pokedex_no'(default), 'pokemon_name' and 'speed_stat'. Can take a query of 'order' to determine if the 'sort_by' is ascending or descending - valid orders are 'desc'(default) and 'asc'. Can take a query of 'pokedex_no' to return all matching pokemon varients. Can take a queries of 'type' and 'type2' to return all pokemon of that include that type (if one is quired) or that match the typing combination (if two are queried). Can take a query of 'ability' to return all pokemon that can have that particular ability. Can take a query of 'limit' to determine the maximum number of pokemon objects returned in the 'pokemon' array - must be a whole, positive number (defaults to 10). Can take a query of 'page' to determine which page of queried 'pokemon' to display in the array - must be a whole, positive number (defaults to 1)",
    "queries": [
      "sort_by",
      "order",
      "pokedex_no",
      "type",
      "type2",
      "ability",
      "limit",
      "page"
    ],
    "exampleInput": {},
    "exampleResponse": {
      "total": 2,
      "users": [
        {
          "pokemon_name": "scovillain",
          "pokedex_no": 952,
          "speed_stat": 75,
          "type_1": "grass",
          "type_2": "fire",
          "ability_1": "chlorophyll",
          "ability_2": "insomnia",
          "ability_3": "moody"
        },
        {
          "pokemon_name": "ogerpon-hearthflame-mask",
          "pokedex_no": 1017,
          "speed_stat": 110,
          "type_1": "grass",
          "type_2": "fire",
          "ability_1": "mold-breaker",
          "ability_2": null,
          "ability_3": null
        }
      ]
    }
  },
  "GET /api/pokemon/:pokemon_name": {
    "description": "serves the requested pokemon as an object on the key of 'pokemon'",
    "queries": [],
    "exampleInput": {},
    "exampleResponse": {
      "pokemon": {
        "pokemon_name": "shaymin-sky",
        "pokedex_no": 492,
        "speed_stat": 127,
        "type_1": "grass",
        "type_2": "flying",
        "ability_1": "serene-grace",
        "ability_2": null,
        "ability_3": null
      }
    }
  }
}
